exports[`test lastCalledWith works only on spies or jest.fn 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m)[.not].lastCalledWith([22m[2m)[22m

[31mjest.fn()[39m value must be a mock function or spy.
Received:
  function: [31m[Function fn][39m"
`;

exports[`test lastCalledWith works with jest.fn and arguments that don't match 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).lastCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to have been last called with:
  [32m[\"foo\", \"bar\"][39m
But it was last called with:
  [31m[\"foo\", \"bar1\"][39m"
`;

exports[`test lastCalledWith works with jest.fn and arguments that match 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).not.lastCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to not have been last called with:
  [32m[\"foo\", \"bar\"][39m"
`;

exports[`test lastCalledWith works with jest.fn and many arguments 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).not.lastCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to not have been last called with:
  [32m[\"foo\", \"bar\"][39m"
`;

exports[`test lastCalledWith works with jest.fn and many arguments that don't match 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).lastCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to have been last called with:
  [32m[\"foo\", \"bar\"][39m
But it was last called with:
  [31m[\"foo\", \"bar3\"][39m
and [31mtwo more calls[39m."
`;

exports[`test lastCalledWith works with jest.fn when not called 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).lastCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to have been last called with:
  [32m[\"foo\", \"bar\"][39m
But it was [31mnot called[39m."
`;

exports[`test toBeCalled works only on spies or jest.fn 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m)[.not].toBeCalled([22m[2m)[22m

[31mjest.fn()[39m value must be a mock function or spy.
Received:
  function: [31m[Function fn][39m"
`;

exports[`test toBeCalled works with jasmine.createSpy 1`] = `
"[2mexpect([22m[31mspy[39m[2m).toBeCalled([22m[2m)[22m

Expected spy to have been called."
`;

exports[`test toBeCalled works with jasmine.createSpy 2`] = `
"[2mexpect([22m[31mspy[39m[2m).not.toBeCalled([22m[2m)[22m

Expected spy not to be called but it was called with:
  [31mArray [][39m"
`;

exports[`test toBeCalled works with jasmine.createSpy 3`] = `
"[2mexpect([22m[31mreceived[39m[2m)[.not].toBeCalled([22m[2m)[22m

Matcher does not accept any arguments.
Got:
  number: [32m555[39m"
`;

exports[`test toBeCalled works with jest.fn 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).toBeCalled([22m[2m)[22m

Expected mock function to have been called."
`;

exports[`test toBeCalled works with jest.fn 2`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).not.toBeCalled([22m[2m)[22m

Expected mock function not to be called but it was called with:
  [31mArray [][39m"
`;

exports[`test toBeCalled works with jest.fn 3`] = `
"[2mexpect([22m[31mreceived[39m[2m)[.not].toBeCalled([22m[2m)[22m

Matcher does not accept any arguments.
Got:
  number: [32m555[39m"
`;

exports[`test toBeCalledWith works only on spies or jest.fn 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m)[.not].toBeCalledWith([22m[2m)[22m

[31mjest.fn()[39m value must be a mock function or spy.
Received:
  function: [31m[Function fn][39m"
`;

exports[`test toBeCalledWith works with jest.fn and arguments that don't match 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).toBeCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to have been called with:
  [32m[\"foo\", \"bar\"][39m
But it was called with:
  [31m[\"foo\", \"bar1\"][39m"
`;

exports[`test toBeCalledWith works with jest.fn and arguments that match 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).not.toBeCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function not to have been called with:
  [32m[\"foo\", \"bar\"][39m"
`;

exports[`test toBeCalledWith works with jest.fn and many arguments 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).not.toBeCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function not to have been called with:
  [32m[\"foo\", \"bar\"][39m"
`;

exports[`test toBeCalledWith works with jest.fn and many arguments that don't match 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).toBeCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to have been called with:
  [32m[\"foo\", \"bar\"][39m
But it was called with:
  [31m[\"foo\", \"bar3\"][39m, [31m[\"foo\", \"bar2\"][39m, [31m[\"foo\", \"bar1\"][39m"
`;

exports[`test toBeCalledWith works with jest.fn when not called 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).toBeCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to have been called with:
  [32m[\"foo\", \"bar\"][39m
But it was [31mnot called[39m."
`;

exports[`test toHaveBeenCalled works only on spies or jest.fn 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m)[.not].toHaveBeenCalled([22m[2m)[22m

[31mjest.fn()[39m value must be a mock function or spy.
Received:
  function: [31m[Function fn][39m"
`;

exports[`test toHaveBeenCalled works with jasmine.createSpy 1`] = `
"[2mexpect([22m[31mspy[39m[2m).toHaveBeenCalled([22m[2m)[22m

Expected spy to have been called."
`;

exports[`test toHaveBeenCalled works with jasmine.createSpy 2`] = `
"[2mexpect([22m[31mspy[39m[2m).not.toHaveBeenCalled([22m[2m)[22m

Expected spy not to be called but it was called with:
  [31mArray [][39m"
`;

exports[`test toHaveBeenCalled works with jasmine.createSpy 3`] = `
"[2mexpect([22m[31mreceived[39m[2m)[.not].toHaveBeenCalled([22m[2m)[22m

Matcher does not accept any arguments.
Got:
  number: [32m555[39m"
`;

exports[`test toHaveBeenCalled works with jest.fn 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).toHaveBeenCalled([22m[2m)[22m

Expected mock function to have been called."
`;

exports[`test toHaveBeenCalled works with jest.fn 2`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).not.toHaveBeenCalled([22m[2m)[22m

Expected mock function not to be called but it was called with:
  [31mArray [][39m"
`;

exports[`test toHaveBeenCalled works with jest.fn 3`] = `
"[2mexpect([22m[31mreceived[39m[2m)[.not].toHaveBeenCalled([22m[2m)[22m

Matcher does not accept any arguments.
Got:
  number: [32m555[39m"
`;

exports[`test toHaveBeenCalledWith works only on spies or jest.fn 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m)[.not].toHaveBeenCalledWith([22m[2m)[22m

[31mjest.fn()[39m value must be a mock function or spy.
Received:
  function: [31m[Function fn][39m"
`;

exports[`test toHaveBeenCalledWith works with jasmine.createSpy and arguments that don't match 1`] = `
"[2mexpect([22m[31mspy[39m[2m).toHaveBeenCalledWith([22m[32mexpected[39m[2m)[22m

Expected spy to have been called with:
  [32m[\"foo\", \"bar\"][39m
But it was called with:
  [31m[\"foo\", \"bar1\"][39m"
`;

exports[`test toHaveBeenCalledWith works with jasmine.createSpy and arguments that match 1`] = `
"[2mexpect([22m[31mspy[39m[2m).not.toHaveBeenCalledWith([22m[32mexpected[39m[2m)[22m

Expected spy not to have been called with:
  [32m[\"foo\", \"bar\"][39m"
`;

exports[`test toHaveBeenCalledWith works with jasmine.createSpy and many arguments 1`] = `
"[2mexpect([22m[31mspy[39m[2m).not.toHaveBeenCalledWith([22m[32mexpected[39m[2m)[22m

Expected spy not to have been called with:
  [32m[\"foo\", \"bar\"][39m"
`;

exports[`test toHaveBeenCalledWith works with jasmine.createSpy and many arguments that don't match 1`] = `
"[2mexpect([22m[31mspy[39m[2m).toHaveBeenCalledWith([22m[32mexpected[39m[2m)[22m

Expected spy to have been called with:
  [32m[\"foo\", \"bar\"][39m
But it was called with:
  [31m[\"foo\", \"bar3\"][39m, [31m[\"foo\", \"bar2\"][39m, [31m[\"foo\", \"bar1\"][39m"
`;

exports[`test toHaveBeenCalledWith works with jasmine.createSpy when not called 1`] = `
"[2mexpect([22m[31mspy[39m[2m).toHaveBeenCalledWith([22m[32mexpected[39m[2m)[22m

Expected spy to have been called with:
  [32m[\"foo\", \"bar\"][39m
But it was [31mnot called[39m."
`;

exports[`test toHaveBeenCalledWith works with jest.fn and arguments that don't match 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).toHaveBeenCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to have been called with:
  [32m[\"foo\", \"bar\"][39m
But it was called with:
  [31m[\"foo\", \"bar1\"][39m"
`;

exports[`test toHaveBeenCalledWith works with jest.fn and arguments that match 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).not.toHaveBeenCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function not to have been called with:
  [32m[\"foo\", \"bar\"][39m"
`;

exports[`test toHaveBeenCalledWith works with jest.fn and many arguments 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).not.toHaveBeenCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function not to have been called with:
  [32m[\"foo\", \"bar\"][39m"
`;

exports[`test toHaveBeenCalledWith works with jest.fn and many arguments that don't match 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).toHaveBeenCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to have been called with:
  [32m[\"foo\", \"bar\"][39m
But it was called with:
  [31m[\"foo\", \"bar3\"][39m, [31m[\"foo\", \"bar2\"][39m, [31m[\"foo\", \"bar1\"][39m"
`;

exports[`test toHaveBeenCalledWith works with jest.fn when not called 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).toHaveBeenCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to have been called with:
  [32m[\"foo\", \"bar\"][39m
But it was [31mnot called[39m."
`;

exports[`test toHaveBeenLastCalledWith works only on spies or jest.fn 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m)[.not].toHaveBeenLastCalledWith([22m[2m)[22m

[31mjest.fn()[39m value must be a mock function or spy.
Received:
  function: [31m[Function fn][39m"
`;

exports[`test toHaveBeenLastCalledWith works with jasmine.createSpy and arguments that don't match 1`] = `
"[2mexpect([22m[31mspy[39m[2m).toHaveBeenLastCalledWith([22m[32mexpected[39m[2m)[22m

Expected spy to have been last called with:
  [32m[\"foo\", \"bar\"][39m
But it was last called with:
  [31m[\"foo\", \"bar1\"][39m"
`;

exports[`test toHaveBeenLastCalledWith works with jasmine.createSpy and arguments that match 1`] = `
"[2mexpect([22m[31mspy[39m[2m).not.toHaveBeenLastCalledWith([22m[32mexpected[39m[2m)[22m

Expected spy to not have been last called with:
  [32m[\"foo\", \"bar\"][39m"
`;

exports[`test toHaveBeenLastCalledWith works with jasmine.createSpy and many arguments 1`] = `
"[2mexpect([22m[31mspy[39m[2m).not.toHaveBeenLastCalledWith([22m[32mexpected[39m[2m)[22m

Expected spy to not have been last called with:
  [32m[\"foo\", \"bar\"][39m"
`;

exports[`test toHaveBeenLastCalledWith works with jasmine.createSpy and many arguments that don't match 1`] = `
"[2mexpect([22m[31mspy[39m[2m).toHaveBeenLastCalledWith([22m[32mexpected[39m[2m)[22m

Expected spy to have been last called with:
  [32m[\"foo\", \"bar\"][39m
But it was last called with:
  [31m[\"foo\", \"bar3\"][39m
and [31mtwo more calls[39m."
`;

exports[`test toHaveBeenLastCalledWith works with jasmine.createSpy when not called 1`] = `
"[2mexpect([22m[31mspy[39m[2m).toHaveBeenLastCalledWith([22m[32mexpected[39m[2m)[22m

Expected spy to have been last called with:
  [32m[\"foo\", \"bar\"][39m
But it was [31mnot called[39m."
`;

exports[`test toHaveBeenLastCalledWith works with jest.fn and arguments that don't match 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).toHaveBeenLastCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to have been last called with:
  [32m[\"foo\", \"bar\"][39m
But it was last called with:
  [31m[\"foo\", \"bar1\"][39m"
`;

exports[`test toHaveBeenLastCalledWith works with jest.fn and arguments that match 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).not.toHaveBeenLastCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to not have been last called with:
  [32m[\"foo\", \"bar\"][39m"
`;

exports[`test toHaveBeenLastCalledWith works with jest.fn and many arguments 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).not.toHaveBeenLastCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to not have been last called with:
  [32m[\"foo\", \"bar\"][39m"
`;

exports[`test toHaveBeenLastCalledWith works with jest.fn and many arguments that don't match 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).toHaveBeenLastCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to have been last called with:
  [32m[\"foo\", \"bar\"][39m
But it was last called with:
  [31m[\"foo\", \"bar3\"][39m
and [31mtwo more calls[39m."
`;

exports[`test toHaveBeenLastCalledWith works with jest.fn when not called 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).toHaveBeenLastCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to have been last called with:
  [32m[\"foo\", \"bar\"][39m
But it was [31mnot called[39m."
`;

exports[`toHaveBeenCalledTimes accepts only numbers 1`] = `
"[2mexpect([22m[31mreceived[39m[2m)[.not].toHaveBeenCalledTimes([22m[32mexpected[39m[2m)[22m

Expected value must be a number.
Got:
  object: [32m{}[39m"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 2`] = `
"[2mexpect([22m[31mreceived[39m[2m)[.not].toHaveBeenCalledTimes([22m[32mexpected[39m[2m)[22m

Expected value must be a number.
Got:
  array: [32mArray [][39m"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 3`] = `
"[2mexpect([22m[31mreceived[39m[2m)[.not].toHaveBeenCalledTimes([22m[32mexpected[39m[2m)[22m

Expected value must be a number.
Got:
  boolean: [32mtrue[39m"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 4`] = `
"[2mexpect([22m[31mreceived[39m[2m)[.not].toHaveBeenCalledTimes([22m[32mexpected[39m[2m)[22m

Expected value must be a number.
Got:
  string: [32m\"a\"[39m"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 5`] = `
"[2mexpect([22m[31mreceived[39m[2m)[.not].toHaveBeenCalledTimes([22m[32mexpected[39m[2m)[22m

Expected value must be a number.
Got:
  object: [32mMap {}[39m"
`;

exports[`toHaveBeenCalledTimes accepts only numbers 6`] = `
"[2mexpect([22m[31mreceived[39m[2m)[.not].toHaveBeenCalledTimes([22m[32mexpected[39m[2m)[22m

Expected value must be a number.
Got:
  function: [32m[Function anonymous][39m"
`;

exports[`toHaveBeenCalledTimes fails if function called less than expected times 1`] = `
"[2mexpect([22m[31mspy[39m[2m).toHaveBeenCalledTimes([22m[32m2[39m[2m)[22m

Expected spy to have been called [32mtwo times[39m, but it was called [31mone time[39m."
`;

exports[`toHaveBeenCalledTimes fails if function called more than expected times 1`] = `
"[2mexpect([22m[31mspy[39m[2m).toHaveBeenCalledTimes([22m[32m2[39m[2m)[22m

Expected spy to have been called [32mtwo times[39m, but it was called [31mthree times[39m."
`;

exports[`toHaveBeenCalledTimes passes if function called equal to expected times 1`] = `
"[2mexpect([22m[31mspy[39m[2m).not.toHaveBeenCalledTimes([22m[32m2[39m[2m)[22m

Expected spy not to be called [32mtwo times[39m, but it was called exactly [31mtwo times[39m."
`;

exports[`toHaveBeenCalledTimes verifies that actual is a Spy 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m)[.not].toHaveBeenCalledTimes([22m[2m)[22m

[31mjest.fn()[39m value must be a mock function or spy.
Received:
  function: [31m[Function fn][39m"
`;
